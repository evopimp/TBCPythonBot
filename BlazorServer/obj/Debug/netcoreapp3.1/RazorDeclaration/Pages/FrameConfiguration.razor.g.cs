// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorServer.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "c:\Users\hopki\OneDrive\Documents\Myaddon\Wickedaddon\WowClassicGrindBot\BlazorServer\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "c:\Users\hopki\OneDrive\Documents\Myaddon\Wickedaddon\WowClassicGrindBot\BlazorServer\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "c:\Users\hopki\OneDrive\Documents\Myaddon\Wickedaddon\WowClassicGrindBot\BlazorServer\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "c:\Users\hopki\OneDrive\Documents\Myaddon\Wickedaddon\WowClassicGrindBot\BlazorServer\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "c:\Users\hopki\OneDrive\Documents\Myaddon\Wickedaddon\WowClassicGrindBot\BlazorServer\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "c:\Users\hopki\OneDrive\Documents\Myaddon\Wickedaddon\WowClassicGrindBot\BlazorServer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "c:\Users\hopki\OneDrive\Documents\Myaddon\Wickedaddon\WowClassicGrindBot\BlazorServer\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "c:\Users\hopki\OneDrive\Documents\Myaddon\Wickedaddon\WowClassicGrindBot\BlazorServer\_Imports.razor"
using BlazorServer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "c:\Users\hopki\OneDrive\Documents\Myaddon\Wickedaddon\WowClassicGrindBot\BlazorServer\_Imports.razor"
using BlazorServer.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "c:\Users\hopki\OneDrive\Documents\Myaddon\Wickedaddon\WowClassicGrindBot\BlazorServer\_Imports.razor"
using Core.Session;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "c:\Users\hopki\OneDrive\Documents\Myaddon\Wickedaddon\WowClassicGrindBot\BlazorServer\_Imports.razor"
using BlazorTable;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "c:\Users\hopki\OneDrive\Documents\Myaddon\Wickedaddon\WowClassicGrindBot\BlazorServer\Pages\FrameConfiguration.razor"
using Core;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "c:\Users\hopki\OneDrive\Documents\Myaddon\Wickedaddon\WowClassicGrindBot\BlazorServer\Pages\FrameConfiguration.razor"
using Microsoft.AspNetCore.Html;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "c:\Users\hopki\OneDrive\Documents\Myaddon\Wickedaddon\WowClassicGrindBot\BlazorServer\Pages\FrameConfiguration.razor"
using System.Threading;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "c:\Users\hopki\OneDrive\Documents\Myaddon\Wickedaddon\WowClassicGrindBot\BlazorServer\Pages\FrameConfiguration.razor"
using SharedLib;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "c:\Users\hopki\OneDrive\Documents\Myaddon\Wickedaddon\WowClassicGrindBot\BlazorServer\Pages\FrameConfiguration.razor"
using Game;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/FrameConfiguration")]
    public partial class FrameConfiguration : Microsoft.AspNetCore.Components.ComponentBase, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 127 "c:\Users\hopki\OneDrive\Documents\Myaddon\Wickedaddon\WowClassicGrindBot\BlazorServer\Pages\FrameConfiguration.razor"
       

    private AddonConfig addonConfig = AddonConfig.Load();
    private AddonConfigurator? addonConfigurator;

    private DataConfig? dataConfig;
    private Core.Database.AreaDB? areaDb;
    private DataFrameMeta dataFrameMeta = DataFrameMeta.Empty;
    private DataFrameConfiguration? config;
    private List<DataFrame> dataFrames = new List<DataFrame>();
    private IAddonDataProvider? addonDataProvider;
    private AddonReader? addonReader;

    private WowProcess? wowProcess;
    private WowScreen? wowScreen;
    private WowProcessInput? WowProcessInput;

    private bool saved = false;
    private string playerClass = "";
    private bool addonNotVisible = false;

    string image = "iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==";

    private Thread? screenshotThread;
    private const int interval = 1000;
    private int counter = 0;
    private CancellationTokenSource? cancellationTokenSource;

    protected override void OnInitialized()
    {
        if (config == null)
        {
            wowProcess = new WowProcess();
            wowScreen = new WowScreen(logger, wowProcess);
            WowProcessInput = new WowProcessInput(logger, wowProcess);
            config = new DataFrameConfiguration(wowScreen);
            dataConfig = DataConfig.Load();

            areaDb = new Core.Database.AreaDB(logger, dataConfig);

            addonConfigurator = new AddonConfigurator(logger, addonConfig);

            if (DataFrameConfiguration.Exists())
            {
                dataFrames = DataFrameConfiguration.LoadFrames();
                dataFrameMeta = DataFrameConfiguration.LoadMeta();

                addonDataProvider = new AddonDataProvider(wowScreen, dataFrames);
            }

            cancellationTokenSource = new CancellationTokenSource();
            screenshotThread = new System.Threading.Thread(ScreenshotRefreshThread);
            screenshotThread.Start();
        }
    }

    public void Dispose()
    {
        cancellationTokenSource?.Cancel();
    }

    private DataFrameMeta GetDataFrameMeta()
    {
        if (config == null) return DataFrameMeta.Empty;

        var screenshot = wowScreen?.GetBitmap(5, 5);
        if (screenshot == null) return DataFrameMeta.Empty;

        var meta = DataFrameConfiguration.GetMeta(screenshot);
        return meta;
    }

    private void ScreenshotRefreshThread()
    {
        while (cancellationTokenSource != null && !cancellationTokenSource.Token.IsCancellationRequested)
        {
            if (wowProcess != null && wowScreen != null && config != null && dataConfig != null && areaDb != null)
            {
                if (dataFrameMeta == DataFrameMeta.Empty)
                {
                    addonNotVisible = false;
                    dataFrameMeta = GetDataFrameMeta();

                    InvokeAsync(() =>
                    {
                        base.StateHasChanged();
                    });
                }
                else
                {
                    var temp = GetDataFrameMeta();
                    if (temp != DataFrameMeta.Empty && temp.rows != dataFrameMeta.rows)
                    {
                        addonNotVisible = true;
                        dataFrameMeta = DataFrameMeta.Empty;

                        InvokeAsync(() =>
                        {
                            base.StateHasChanged();
                        });
                    }
                }

                if (dataFrameMeta != DataFrameMeta.Empty)
                {
                    var size = dataFrameMeta.EstimatedSize();
                    wowScreen.GetRectangle(out var rect);

                    if (size.Width < rect.Size.Width &&
                        size.Height < rect.Size.Height && !size.IsEmpty)
                    {
                        var screenshot = wowScreen.GetBitmap(size.Width, size.Height);
                        if (screenshot != null)
                        {
                            using (System.IO.MemoryStream ms = new System.IO.MemoryStream())
                            {
                                screenshot.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);
                                byte[] byteImage = ms.ToArray();
                                this.image = Convert.ToBase64String(byteImage); // Get Base64

                                if (dataFrameMeta == DataFrameMeta.Empty)
                                {
                                    dataFrameMeta = DataFrameConfiguration.GetMeta(screenshot);
                                }

                                //if(dataFrames.Count == 0)
                                if (dataFrames.Count != dataFrameMeta.frames)
                                {
                                    dataFrames = DataFrameConfiguration.CreateFrames(dataFrameMeta, screenshot);
                                }

                                if (dataFrames.Count == dataFrameMeta.frames)
                                {
                                    if (addonReader != null)
                                    {
                                        addonReader.Dispose();
                                        addonDataProvider = null;
                                    }

                                    if (addonDataProvider == null)
                                    {
                                        addonDataProvider = new AddonDataProvider(wowScreen, dataFrames);
                                    }

                                    addonReader = new AddonReader(logger, dataConfig, areaDb, addonDataProvider);
                                }

                                if (addonReader != null) // && dataFrames.Count != dataFrameMeta.frames
                                {
                                    ResolveClass(addonReader);
                                }

                                InvokeAsync(() =>
                                {
                                    base.StateHasChanged();
                                });
                            }
                        }
                    }
                    else
                    {
                        addonNotVisible = true;
                        dataFrameMeta = DataFrameMeta.Empty;

                        InvokeAsync(() =>
                        {
                            base.StateHasChanged();
                        });
                    }
                }
            }

            System.Threading.Thread.Sleep(interval);
            Interlocked.Increment(ref counter);
        }
    }

    private async Task Configure()
    {
        if (wowScreen == null) return;
        if (config == null) return;

        var version = addonConfigurator?.GetInstalledVersion();
        if (version == null) return;

        if (dataFrames.Count != dataFrameMeta.frames)
        {
            return;
        }

        wowScreen.GetRectangle(out var rect);

        DataFrameConfiguration.SaveConfiguration(rect, version, dataFrameMeta, dataFrames);
        saved = true;

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });

        await Wait();

        await RestartServer();
    }

    private async Task AutoConfigure()
    {
        if (config == null) return;

        var version = addonConfigurator?.GetInstalledVersion();
        if (version == null) return;

        var meta = GetDataFrameMeta();
        if (meta == DataFrameMeta.Empty || meta.hash == 0)
        {
            await ToggleInGameConfiguration();
            await Wait();
        }

        meta = GetDataFrameMeta();

        var size = meta.EstimatedSize();
        var screenshot = wowScreen?.GetBitmap(size.Width, size.Height);
        if (screenshot == null) return;

        var dataFrames = DataFrameConfiguration.CreateFrames(meta, screenshot);

        if (dataFrames.Count != meta.frames)
        {
            return;
        }

        await Wait();

        await ToggleInGameConfiguration();

        if (addonReader != null && !ResolveClass(addonReader))
        {
            return;
        }

        await Wait();

        if (wowScreen == null) return;
        wowScreen.GetRectangle(out var rect);
        DataFrameConfiguration.SaveConfiguration(rect, version, meta, dataFrames);
        saved = true;

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });

        await Wait();

        await RestartServer();
    }

    private async Task ToggleInGameConfiguration()
    {
        if (WowProcessInput != null)
        {
            WowProcessInput.SetForegroundWindow();
            await WowProcessInput.KeyPress(ConsoleKey.Enter, 200);
            WowProcessInput.SetForegroundWindow();
            await WowProcessInput.SendText("/" + addonConfig?.Command);
            WowProcessInput.SetForegroundWindow();
            await WowProcessInput.KeyPress(ConsoleKey.Enter, 200);
        }
    }

    private async Task RestartServer()
    {
        cancellationTokenSource?.Cancel();

        this.botController.Shutdown();
        await Task.Delay(1000);
        NavigationManager.NavigateTo("/");
        lifetime.StopApplication();
    }

    private bool ResolveClass(AddonReader addonReader)
    {
        addonReader.Refresh();
        if (Enum.GetValues(typeof(PlayerClassEnum)).Cast<PlayerClassEnum>().Contains(addonReader.PlayerReader.PlayerClass))
        {
            playerClass = "The class of the character is: " + addonReader.PlayerReader.PlayerClass.ToString();
            return true;
        }
        else
        {
            playerClass = "Still unable to read player class";
        }

        return false;
    }

    private async Task Wait()
    {
        var temp = counter;
        do
        {
            await Task.Delay(100);
        } while (temp == counter);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Core.IBotController botController { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.Extensions.Hosting.IHostApplicationLifetime lifetime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.Extensions.Logging.ILogger logger { get; set; }
    }
}
#pragma warning restore 1591
