@page "/AddonConfiguration"
@inject Microsoft.Extensions.Logging.ILogger logger
@inject Microsoft.Extensions.Hosting.IHostApplicationLifetime lifetime
@inject NavigationManager NavigationManager
@inject Core.IBotController botController

<style>
    h5 {
        margin-top: 20px
    }
</style>

<br>
<div class="container mt-3">
    <div class="row">
        <div class="col-10">
            <h3>
                Addon configuration(@(AddonConfig.DefaultFileName)) file @(AddonConfig.Exists()? "exists" : "not exists") and @(!addonConfig.IsDefault() ? "valid" : "not valid")
            </h3>
        </div>
        <div class="w-100"></div>
        <div class="col-1">
            <h6>0.</h6>
        </div>
        <div class="col">
            <h5>Addon Status</h5>
        </div>
        <div class="col">
            @((MarkupString)AddonStatus())
        </div>
        <div class="w-100"></div>
        <div class="col-1">
            <h6>1.</h6>
        </div>
        <div class="col">
            <h5>Find the <b>InstallPath</b> by running game instance:</h5>
        </div>
        <div class="col">
            <button class="btn btn-sm btn-primary" @onclick="FindPathByExe">
                <span>Find InstallPath by running client</span>
            </button>
        </div>
        <div class="w-100"></div>
        <div class="col-1">
            <h6>2.</h6>
        </div>
        <div class="col">
            <h5>Delete previous <b>AddonConfig</b> and installed addon</h5>
        </div>
        <div class="col">
            <button class="btn btn-sm btn-danger" @onclick="Delete">
                <span>Delete current configuration</span>
            </button>
        </div>
    </div>
</div>

<div class="container mt-3">
    <div class="card">
        <div class="card-header">
            Addon Configuration
        </div>
        <div class="card-body" style="padding-bottom: 0">
            <table class="table table-bordered">
                @foreach (var property in addonConfig.GetType().GetProperties())
                {
                    <tr>
                        @switch (property.PropertyType.FullName)
                        {
                            case "System.String":
                                <td>@(property.Name)</td>
                                <td>
                                    <input value="@property.GetValue(addonConfig)?.ToString()" style="width:100%" disabled="@(property.Name.Contains("Command") ? "disabled" : null)"
                                           @onchange="c => { property.SetValue(addonConfig, c.Value); Update(); }" />
                                </td>
                                break;
                        }
                    </tr>
                }
            </table>
        </div>
    </div>
</div>

<div class="container mt-3">
    <div class="row">
        <div class="col-1">
            <h6>3.</h6>
        </div>
        <div class="col">
            <h5>Finalize AddonConfig setup, addon will be installed:</h5>
        </div>
        <div class="col">
            <button class="btn btn-sm btn-success" @onclick="Install">
                <span>Install & Save</span>
            </button>
        </div>
    </div>
</div>

<LogComponent />

@using SharedLib;
@code {

    private AddonConfigurator? addonConfigurator;
    private AddonConfig addonConfig = AddonConfig.Load();

    protected override void OnInitialized()
    {
        addonConfigurator = new AddonConfigurator(logger, addonConfig);
    }

    private async Task RestartServer()
    {
        this.botController.Shutdown();
        await Task.Delay(1000);
        NavigationManager.NavigateTo("/");
        lifetime.StopApplication();
    }

    private async Task Delete()
    {
        addonConfigurator?.Delete();

        if (DataFrameConfiguration.Exists())
        {
            await RestartServer();
        }
        else
        {
            NavigationManager.NavigateTo("/", true);
        }
    }

    private void FindPathByExe()
    {
        addonConfigurator?.FindPathByExecutable();
    }

    private void Install()
    {
        if(addonConfigurator != null && addonConfigurator.Validate())
        {
            addonConfigurator?.Install();
            addonConfigurator?.Save();
            NavigationManager.NavigateTo("/AddonConfiguration", true);
        }
    }

    private void Update()
    {

    }

    private string AddonStatus()
    {
        if(addonConfigurator != null && AddonConfig.Exists() && addonConfigurator.Installed())
        {
            if (addonConfigurator.UpdateAvailable())
            {
                return "<p class=\"text-warning\">Update available - press <b>Install & Save</b></p>";
            }
            else
            {
                return "<p class=\"text-success\">Up to Date</p>";
            }
        }

        return "<p class=\"text-danger\">Not Installed</p>";
    }
}
