@using Core
@using SharedLib; 
@inject Core.IBotController botController
@inject Core.IAddonReader addonReader

<div class="card @(Hide ? "hide" : "")" style="margin-top: 10px">
    <div class="card-header">
        <button class="btn btn-sm btn-primary" @onclick="RefreshData">
            <span class="glyphicon glyphicon-refresh"></span>
        </button>

        Class Profile

        <select name="listbox" id="listbox" @onchange="OnListBoxChanged" runat="server">
            @foreach (var item in files)
            {
                <option value="@item" selected="@(selectedProfile == @item ? "selected" : null)">
                    @item
                </option>
            }
        </select>

        <button class="btn btn-sm btn-primary " @onclick="LoadClassProfile" disabled="@(disableButton ? "disabled" : null)">
            <span>Load Profile</span>
        </button>

        <button class="btn btn-sm btn-primary float-right" @onclick="SyncActionBar" disabled="@(string.IsNullOrEmpty(botController.SelectedClassFilename) ? "disabled" : null)">
            <span>Populate Action bar</span>
        </button>
    </div>
</div>

@code {

    [Parameter]
    public bool Hide { get; set; } = false;

    List<string> files = new List<string> { string.Empty };

    string selectedProfile = String.Empty;
    bool disableButton = true;

    protected override void OnInitialized()
    {
        if (DataFrameConfiguration.Exists())
        {
            RefreshData();

            ((Core.AddonReader)addonReader).AddonDataChanged += (o, e) =>
            {
                base.InvokeAsync(() =>
                {
                    try
                    {
                        StateHasChanged();
                    }
                    catch { }
                });
            };
        }
    }

    public void OnGet()
    {
        RefreshData();
    }

    private void LoadClassProfile()
    {
        if(!string.IsNullOrEmpty(selectedProfile)) {
            botController.LoadClassProfile(selectedProfile);
        }
    }

    private void OnListBoxChanged(ChangeEventArgs changeEventArgs)
    {
        selectedProfile = (string)changeEventArgs.Value;
        disableButton = string.IsNullOrEmpty(selectedProfile);
    }

    private void RefreshData()
    {
        files = botController.ClassFileList();
        selectedProfile = botController.SelectedClassFilename;
        disableButton = string.IsNullOrEmpty(selectedProfile);
    }

    private async Task SyncActionBar()
    {
        if (botController.ActionBarPopulator == null) return;
        await botController.ActionBarPopulator.Execute();
    }

}