@page "/RecordPath"

@using Core
@using Newtonsoft.Json
@using System.IO

@inject Core.IAddonReader addonReader
@inject Core.IBotController botController
@inject IJSRuntime JSRuntime

<h3>Path Recording</h3>

@if (!recording)
{
    <button class="btn btn-primary" @onclick="Record">Record New</button>
}
@if (!editing)
{
    <button class="btn btn-primary" @onclick="Edit">Edit</button>
}
@if (recording || editing)
{
    <button class="btn btn-primary" @onclick="Save">Save</button>
    <button class="btn btn-primary" @onclick="Clear">Clear</button>
}
<div>@Message</div>

<div class="row">
    <div class="col-sm">
        <div id="grid">
            <svg width="602px" height="602px">
                <g class="background">
                </g>

                @if (botController.RouteInfo != null)
                {
                    <circle cx="@botController.RouteInfo.ToCanvasPointX(addonReader.PlayerReader.XCoord)"
                            cy="@botController.RouteInfo.ToCanvasPointY(addonReader.PlayerReader.YCoord)"
                            r="4" fill="blue" />
                }

                <g class="group2">
                    <g stroke-width="1" stroke="gray">
                        @this.PathLines
                    </g>
                    <g fill="black">
                        @this.PathPoints
                    </g>
                    <g fill="red">
                        @this.EditPoints
                    </g>
                </g>
            </svg>
        </div>
    </div>

    <div class="col-sm">

        @if (editPoint != null)
        {
            <h3>Edit Path</h3>

            <input type="text" @bind="X" />
            <input type="text" @bind="Y" />
            <button class="btn btn-primary" @onclick="Update">Update</button>
            <button class="btn btn-primary" @onclick="Remove">Remove</button>

            <table>
                <tr>
                    <td>
                        Distance between spots =  @Distance
                    </td>
                    <td>
                        <input class="form-control slider" type="range" min="1" max="100" @bind="Distance" style="width:300px;margin-left:20px">
                    </td>
                </tr>
            </table>
            <div>@error</div>
            <br />
        }

        @if (botController.RouteInfo != null)
        {
            foreach (var point in @botController.RouteInfo.PathPoints)
            {
                <span class="badge @DisplayBadge(point)" @onclick="() => EditPoint(point)">
                    @point.X.ToString("0.00"),@point.Y.ToString("0.00")&nbsp;
                </span>
            }
        }
    </div>
</div>

<div id="tooltip" display="none" style="position: absolute; display: none;"></div>

@code {
    private MarkupString PathLines = new MarkupString();
    private MarkupString PathPoints = new MarkupString();
    private MarkupString EditPoints = new MarkupString();

    int Distance = 60;
    string X = "";
    string Y = "";
    string error = "";
    string Message = "";

    WowPoint editPoint = new WowPoint(0, 0);

    public string DisplayBadge(WowPoint point)
    {
        if (this.editPoint == point)
        {
            return "badge-danger";
        }

        return "badge-info";
    }

    protected override void OnInitialized()
    {

        ((Core.AddonReader)addonReader).AddonDataChanged += (o, e) =>
        {
            base.InvokeAsync(() =>
            {
                try
                {
                    AddonDataChanged();
                    StateHasChanged();
                }
                catch { }
            });
        };
    }

    private void UpdateRoute()
    {
        if (botController.RouteInfo != null)
        {
            error = "";
            botController.RouteInfo.SetMargin(20);
            botController.RouteInfo.SetCanvasSize(600);

            if (botController.RouteInfo.PathPoints.Count > 0)
            {
                this.PathLines = new MarkupString(botController.RouteInfo.RenderPathLines(botController.RouteInfo.PathPoints));
                this.PathPoints = new MarkupString(botController.RouteInfo.RenderPathPoints(botController.RouteInfo.PathPoints.Where(p => p != this.editPoint).ToList()));
                this.EditPoints = new MarkupString(botController.RouteInfo.RenderPathPoints(new List<WowPoint> { this.editPoint }));
            }
        }
    }

    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<string>("draw");
        }
    }

    private void AddonDataChanged()
    {
        if (!recording) { return; }

        var location = new WowPoint(addonReader.PlayerReader.XCoord, addonReader.PlayerReader.YCoord);

        if (botController.RouteInfo != null)
        {
            if (botController.RouteInfo.PathPoints.Count == 0 || DistanceTo(location, botController.RouteInfo.PathPoints.Last()) > Distance & location.X != 0)
            {
                botController.RouteInfo.PathPoints.Add(location);
                UpdateRoute();
            }
        }
    }

    private double DistanceTo(WowPoint l1, WowPoint l2)
    {
        var x = l1.X - l2.X;
        var y = l1.Y - l2.Y;
        x = x * 100;
        y = y * 100;
        return Math.Sqrt((x * x) + (y * y));
    }

    private bool recording = false;
    private bool editing = false;

    private void Record()
    {
        recording = true;
        editing = false;
        if (botController.RouteInfo != null)
        {
            botController.RouteInfo.PathPoints.Clear();
        }
        Message = "Recording...";
    }

    private void Edit()
    {
        recording = false;
        Message = "Editing...";
        UpdateRoute();
        editing = true;
    }

    private void Clear()
    {
        recording = false;
        if (botController.RouteInfo != null)
        {
            botController.RouteInfo.PathPoints.Clear();
        }
        Message = "Cleared...";
    }

    private void Save()
    {
        if (botController.RouteInfo != null)
        {
            var filename = $"__Path_{ DateTime.Now.ToString("yyyyMMddHHmmss")}.json";
            File.WriteAllText(Path.Join(botController.DataConfig.Path, filename), JsonConvert.SerializeObject(botController.RouteInfo.PathPoints));
            Message = $"Saved to: {filename}";
            recording = false;
        }
    }

    private void EditPoint(WowPoint point)
    {
        this.editPoint = point;
        this.X = point.X.ToString("0.00");
        this.Y = point.Y.ToString("0.00");

        UpdateRoute();

        try
        {
            AddonDataChanged();
            StateHasChanged();
        }
        catch { }
    }

    private void Update()
    {
        try
        {
            editPoint.X = double.Parse(this.X);
            editPoint.Y = double.Parse(this.Y);
            UpdateRoute();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    private void Remove()
    {
        if (botController.RouteInfo != null)
        {
            botController.RouteInfo.PathPoints.Remove(editPoint);
            this.editPoint = new WowPoint(0, 0);
            UpdateRoute();
        }
    }
}