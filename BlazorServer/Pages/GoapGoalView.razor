<tr class="@ActionClass(this.IsSelected)">
    <td>
        <b style="color:@DisplayColour(goal.CheckIfActionCanRun())">@goal.CostOfPerformingAction: @goal.Description()</b>
    </td>
    <td>
        @foreach (var item in this.goal.State)
        {
            <span class="badge @Badge(item)">@item.Key</span>
        }
        @if (this.goal.Keys.Count == 1 && this.goal.GetType().Name != "GenericPullGoal")
        {
            @foreach (var requirement in this.goal.Keys[0].RequirementObjects)
            {
                @if (requirement.VisibleIfHasRequirement || !requirement.HasRequirement())
                {
                    <span class="badge @Badge(requirement.HasRequirement())">@requirement.LogMessage()</span>
                }
            }
        }
    </td>
</tr>
@if ((this.goal.Keys.Count > 1 || this.goal.GetType().Name == "GenericPullGoal") && ShowKeys && (this.IsSelected || this.goal.GetType().Name == "ParallelGoal"))
{
    <tr>
        <td colspan="2">
            <table style="margin-left: 60px;">

                @if (this.goal.Keys != null)
                {
                    var lastKeyClicked = Core.KeyAction.LastKeyClicked();

                    foreach (var key in this.goal.Keys)
                    {
                        <tr class="@ActionClass(lastKeyClicked==key.ConsoleKey)">
                            <td>
                                <b style="color:@DisplayColour(key.CanRun())">@key.Name [@key.ConsoleKey]</b>
                            </td>
                            <td>
                                @foreach (var requirement in key.RequirementObjects)
                                {
                                    @if (requirement.VisibleIfHasRequirement || !requirement.HasRequirement())
                                    {
                                        <span class="badge @Badge(requirement.HasRequirement())">@requirement.LogMessage()</span>
                                    }
                                }
                            </td>
                        </tr>
                    }
                }
            </table>
        </td>
    </tr>
}

@code {

    [Parameter]
    public bool IsSelected { get; set; }

    [Parameter]
    public bool ShowKeys { get; set; } = false;

    [Parameter]
    public Core.Goals.GoapGoal goal { get; set; } = new Core.Goals.NullGoal();

    public string Badge(KeyValuePair<string, bool> item)
    {
        return item.Value ? "badge-success" : "badge-danger";
    }

    public string Badge(bool value)
    {
        return value ? "badge-success" : "badge-danger";
    }

    public string ActionClass(bool item)
    {
        if (item == true)
        {
            return "table-success animate__animated animate__fadeIn";
        }

        return "table-default";
    }

    public string DisplayColour(bool item)
    {
        return item ? "black" : "gray";
    }
}